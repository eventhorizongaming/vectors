class Vector{x;y;constructor(x,y){this.x=x;this.y=y}get length(){return Math.hypot(this.x,this.y)}set length(v){this.scale(v/this.length)}getLength(){return this.length}setLength(v){this.length=v;return this}scale(s){this.x*=this.y*=s;return this}normalize(){this.length=1;return this}getX(){return this.x}setX(v){this.x=v;return this}getY(){return this.y}setY(v){this.y=v;return this}set(x,y){this.x=x;this.y=y;return this}get angle(){return Math.atan2(this.y,this.x)}set angle(v){this.set(Math.cos(v)*this.length,Math.sin(v)*this.length)}getAngle(){return this.angle}setAngle(v){this.angle=v;return this}clone(){return new Vector(this.x, this.y)}toArray(){return[this.x,this.y]}static add(a,b){return new Vector(a.x+b.x, a.y+b.y)}static sub(A,_){return new Vector(A.x-_.x, A.y-_.y)}static dot(B,c){return (B.x*c.x)+(B.y*c.y)}static interpolate(C,_b,_c){return new Vector(C.x+(_b.x-C.x)*_c, C.y+(_b.y-C.y)*_c)}add(_a){return Vector.add(this,_a)}sub(d){return Vector.sub(this,d)}dot(D){return Vector.dot(this,D)}}export{Vector as default,Vector,Vector as Vec};